source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
example(persp3d)
example(persp3D)
library(persp3D)
install.packages("persp3D")
install.packages("persp3d")
install.packages("plot3d")
install.packages("plot3D")
example(persp3D)
example(persp3d)
library(plot3D)
example(persp3d)
example(persp3D)
elev
source('~/.active-rstudio-document', echo=TRUE)
elev$elev
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
example("persp3D")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
volcano
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
elev$long
class(elev$elev)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
elev[,1]
class[elev[,1]]
class(elev[,1])
as.matrix(elev[,1])
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
elev
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
esoph
source('~/Desktop/hw2.R', echo=TRUE)
source('~/Desktop/hw2.R', echo=TRUE)
source('~/Desktop/hw2.R', echo=TRUE)
source('~/Desktop/hw2.R', echo=TRUE)
source('~/Desktop/hw2.R', echo=TRUE)
source('~/Desktop/hw2.R', echo=TRUE)
source('~/Desktop/hw2.R', echo=TRUE)
source('~/Desktop/hw2.R', echo=TRUE)
esoph
datasets
data
freeny
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
lwd = 2, cex = 1.2, pch = c(X,Y))
legend(x="topright", c("inital target function", "learned decision boundary"), lty=c(1,1), lwd=c(2.5,2.5),col=c("red","blue")) legend(x="topright", c("inital target function", "learned decision boundary"), lty=c(1,1), lwd=c(2.5,2.5),col=c("red","blue")) legend(x="topright", c("inital target function", "learned decision boundary"), lty=c(1,1), lwd=c(2.5,2.5),col=c("red","blue"))
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
View(X)
View(Y)
source('~/machine_learning_hw1.R', echo=TRUE)
View(tX)
View(W)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
View(invX)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
invX <- ginv(tX %*% X)
trainData
source('~/machine_learning_hw1.R', echo=TRUE)
View(X)
source('~/machine_learning_hw1.R', echo=TRUE)
View(tX)
View(X)
source('~/machine_learning_hw1.R', echo=TRUE)
View(pX)
source('~/machine_learning_hw1.R', echo=TRUE)
source('~/machine_learning_hw1.R', echo=TRUE)
View(wlin)
source('~/machine_learning_hw1.R', echo=TRUE)
View(wlin)
View(W)
View(wlin)
View(wlin)
source('~/Desktop/BigData/assignment3.R', echo=TRUE)
source('~/Desktop/BigData/assignment3.R', echo=TRUE)
View(wlin)
source('~/R/machine_learning_hw1.R', echo=TRUE)
View(wlin)
source('~/R/machine_learning_hw1.R', echo=TRUE)
View(wlin)
source('~/R/machine_learning_hw1.R', echo=TRUE)
source('~/R/machine_learning_hw1.R', echo=TRUE)
View(b)
source('~/R/machine_learning_hw1.R', echo=TRUE)
source('~/R/machine_learning_hw1.R', echo=TRUE)
source('~/R/machine_learning_hw1.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
source('~/Desktop/BigData/assignment5.r', echo=TRUE)
devtools::install_github("rstudio/sparklyr")
source('~/Desktop/BigData/assignment5.r', echo=TRUE)
source('~/Desktop/BigData/assignment5.r', echo=TRUE)
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
install.packages(c("nycflights13", "Lahman"))
source('~/Desktop/BigData/hw4/assignment4.R', echo=TRUE)
source('~/Desktop/BigData/hw4/assignment4.R', echo=TRUE)
flights_tbl
src_tbls(sc)
flights_tbl
batting_tbl
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
source('~/Desktop/BigData/hw4/assignment4.R', echo=TRUE)
overwrite = TRUE
source('~/Desktop/BigData/hw4/assignment4.R', echo=TRUE)
source('~/Desktop/BigData/hw4/assignment4.R', echo=TRUE)
source('~/Desktop/BigData/hw4/assignment4.R', echo=TRUE)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
delay <- flights_tbl %>%
group_by(tailnum) %>%
summarise(count = n(), dist = mean(distance), delay = mean(arr_delay)) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
collect
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
dataframe
dataframe <-data.frame(delay)
dataframe
filter(flights_tbl,dep_delay == 2,count>50)
source('~/Desktop/BigData/hw4/assignment4.R', echo=TRUE)
ggplot(delay, aes(delay, dist)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
ggplot(delay, aes(delay, dist)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 3)
ggplot(delay, aes(delay, dist)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 10)
ggplot(delay, aes(delay, dist)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 5)
ggplot(delay, aes(delay, dist)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 3)
mtcars_tbl <- copy_to(sc, mtcars)
fit <- partitions$training %>%
ml_linear_regression(response = "mpg", features = c("wt", "cyl"))
source('~/Desktop/BigData/hw4/assignment4.R', echo=TRUE)
fit <- partitions$training %>%
ml_linear_regression(response = "mpg", features = c("wt", "cyl"))
mtcars_tbl <- copy_to(sc, mtcars)
source('~/Desktop/BigData/hw4/assignment4.R', echo=TRUE)
source('~/Desktop/BigData/hw4/assignment4.R', echo=TRUE)
plot(fit)
summary(fit)
partitions <- mtcars_tbl %>%
filter(hp >= 100) %>%
mutate(cyl8 = cyl == 8) %>%
sdf_partition(training = 0.5, test = 0.5, seed = 1099)
source('~/Desktop/BigData/assignment5.r', echo=TRUE)
install.packages(c("nycflights13", "Lahman"))
batting_tbl <- copy_to(sc, Lahman::Batting, "batting")
src_tbls(sc)
flights_tbl %>% filter(dep_delay == 2)
delay <- flights_tbl %>%
group_by(tailnum) %>%
summarise(count = n(), dist = mean(distance), delay = mean(arr_delay)) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
collect
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
batting_tbl %>%
select(playerID, yearID, teamID, G, AB:H) %>%
arrange(playerID, yearID, teamID) %>%
group_by(playerID) %>%
filter(min_rank(desc(H)) <= 2 & H > 0)
source('~/Desktop/BigData/assignment5.r', echo=TRUE)
delay <- flights_tbl %>%
group_by(origin) %>%
summarise(count = n(), dist = mean(distance), delay = mean(arr_delay)) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
collect
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
delay <- flights_tbl %>%
group_by(tailnum) %>%
summarise(count = n(), dist = mean(air_time), delay = mean(arr_delay)) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
collect
source('~/Desktop/BigData/assignment5.r', echo=TRUE)
install.packages(c("nycflights13", "Lahman"))
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
delay <- flights_tbl %>%
group_by(tailnum) %>%
summarise(count = n(), dist = mean(air_time), delay = mean(arr_delay)) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
collect
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
library(ggplot2)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("rJava")
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/BigData/twitter.R', echo=TRUE)
install.packages("twitteR")
save(cred, file="twitter_authentication.Rdata")
source('~/Desktop/BigData/twitter.R', echo=TRUE)
source('~/Desktop/BigData/twitter.R', echo=TRUE)
source('~/Desktop/BigData/twitter.R', echo=TRUE)
source('~/Desktop/BigData/twitter.R', echo=TRUE)
source('~/Desktop/BigData/twitter.R', echo=TRUE)
install.packages("httr")
source('~/Desktop/BigData/twitter.R', echo=TRUE)
source('~/Desktop/BigData/twitter.R', echo=TRUE)
1
down vote
install.packages("base64enc")
source('~/Desktop/BigData/twitter.R', echo=TRUE)
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
source('~/Desktop/BigData/twitter.R', echo=TRUE)
source('~/Desktop/BigData/twitter.R', echo=TRUE)
source('~/Desktop/BigData/twitter.R', echo=TRUE)
install.packages("openssl")
install.packages("httpuv")
install.packages("openssl")
source('~/Desktop/BigData/twitter.R', echo=TRUE)
source('~/Desktop/BigData/twitter.R', echo=TRUE)
source('~/Desktop/BigData/twitter.R', echo=TRUE)
source('~/Desktop/BigData/twitter.R', echo=TRUE)
tweets
source('~/Desktop/BigData/twitter.R', echo=TRUE)
source('~/Desktop/BigData/twitter.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter.R', echo=TRUE)
wd
printwd
getwd
getwd()
setwd('~/desktop/bigdata/twitter/big-data---twitter-sentiment-analysis')
getwd()
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter.R', echo=TRUE)
install.package('stringr')
install.packages('stringr')
install.packages("stringr")
install.packages('plyr')
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/tweet_location.R', echo=TRUE)
install.packages(toInstall, repos = "http://cran.us.r-project.org")
install.packages(toInstall, repos = "http://cran.us.r-project.org")
install.packages("dismo")
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/tweet_location.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/tweet_location.R', echo=TRUE)
install.packges('XML')
install.packages('XML')
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/tweet_location.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/tweet_location.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/tweet_location.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/tweet_location.R', echo=TRUE)
install.packages("RJSONIO")
locations
with(locations, plot(longitude, latitude))
worldMap <- map_data("world")  # Easiest way to grab a world map shapefile
zp1 <- ggplot(worldMap)
zp1 <- zp1 + geom_path(aes(x = long, y = lat, group = group),  # Draw map
colour = gray(2/3), lwd = 1/3)
zp1 <- zp1 + geom_point(data = locations,  # Add points indicating users
aes(x = lon, y = lat),
colour = "RED", alpha = 1/2, size = 1)
zp1 <- zp1 + coord_equal()  # Better projections are left for a future post
zp1 <- zp1 + theme_minimal()  # Drop background annotations
print(zp1)
zp1 <- zp1 + geom_point(data = locations,  # Add points indicating users
aes(x = longitude, y = latitude),
colour = "RED", alpha = 1/2, size = 1)
zp1 <- zp1 + coord_equal()  # Better projections are left for a future post
zp1 <- zp1 + theme_minimal()  # Drop background annotations
print(zp1)
print(zp1)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/tweet_location.R', echo=TRUE)
zp1 <- ggplot(worldMap)
install.packages(c("mapproj", "maps"))
install.packages(c("mapproj", "maps"))
worldMap <- map_data("world")  # Easiest way to grab a world map shapefile
zp1 <- ggplot(worldMap)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/tweet_location.R', echo=TRUE)
zp1 <- ggplot(worldMap)
print(zp1)
plot(zp1)
with(locations, plot(longitude, latitude))
zp1 <- ggplot(worldMap)
print(zp1)
zp1 <- zp1 + geom_path(aes(x = longitude, y = latitude, group = group),  # Draw map
colour = gray(2/3), lwd = 1/3)
zp1 <- zp1 + geom_point(data = locations,  # Add points indicating users
aes(x = longitude, y = latitude),
colour = "RED", alpha = 1/2, size = 1)
zp1 <- zp1 + coord_equal()  # Better projections are left for a future post
zp1 <- zp1 + theme_minimal()  # Drop background annotations
print(zp1)
plot(zp1)
ggplot(zp1)
ggplot2(zp1)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
install.packages("wordcloud")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("NLP")
install.packages("openNLP")
install.packages("qdap")
install.packages("qdapTools")
install.packages("qdapDictionaries")
install.packages("qdapRegex")
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
install.package('tm.plugin.webmining')
install.packages('tm.plugin.webmining')
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
install.packages("doBy")
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
tweets
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
install.packages('reshape2')
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
ggplot(data=all.scores) +  geom_histogram(mapping=aes(x=score, fill=university), binwidth=1) + facet_grid(university~.) +  theme_bw() + scale_fill_manual(values=cbPalette)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
ggplot(data=all.scores) +  geom_histogram(mapping=aes(x=score, fill=university), binwidth=1) + facet_grid(university~.) +  theme_bw() + scale_fill_manual(values=cbPalette)
ggplot(data=all.scores) +  geom_bar(mapping=aes(x=score, fill=university), binwidth=1) + facet_grid(university~.) +  theme_bw() + scale_fill_manual(values=cbPalette)
orderBy(~-score, twitter.df)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
orderBy(~-score, twitter.df)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
ggplot(data=all.scores) +  geom_histogram(mapping=aes(x=score, fill=airline), binwidth=1) + facet_grid(airline~.) +  theme_bw() + scale_fill_manual(values=cbPalette)
ggplot(data=all.scores) +  geom_histogram(mapping=aes(x=score, fill=airline), binwidth=1) + facet_grid(airline~.) +  theme_bw() + scale_fill_manual(values=cbPalette)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/tweet_location.R', echo=TRUE)
zp1 <- ggplot(worldMap)
zp1 <- zp1 + geom_path(aes(x = longitude, y = latitude, group = group),  # Draw map
colour = gray(2/3), lwd = 1/3)
zp1 <- zp1 + geom_point(data = locations,  # Add points indicating users
aes(x = longitude, y = latitude),
colour = "RED", alpha = 1/2, size = 1)
zp1 <- zp1 + coord_equal()  # Better projections are left for a future post
zp1 <- zp1 + theme_minimal()  # Drop background annotations
print(zp1)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/tweet_location.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter_location2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter_location2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter_location2.R', echo=TRUE)
MapDataPlot(TwitterData)
plotData = plotData + geom_point(shape = ".") + theme_bw() + scale_colour_gradient(low = "#FFFFFF",
high = "#F5B342", guide = "none") + scale_alpha(guide = "none"),
panel.background = theme_blank(), panel.border = theme_blank(), panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank())
plotData = plotData + geom_point(shape = ".") + theme_bw() + scale_colour_gradient(low = "#FFFFFF",
high = "#F5B342", guide = "none") + scale_alpha(guide = "none"),
panel.background = theme_blank(), panel.border = theme_blank(), panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank()
plotData = plotData + geom_point(shape = ".") + theme_bw() + scale_colour_gradient(low = "#FFFFFF",
high = "#F5B342", guide = "none") + scale_alpha(guide = "none"),
panel.background = theme_blank(), panel.border = theme_blank(), panel.grid.major = theme_blank())
plotData = plotData + geom_point(shape = ".") + theme_bw() + scale_colour_gradient(low = "#FFFFFF",  high = "#F5B342", guide = "none") + scale_alpha(guide = "none"))
plotData = plotData + geom_point(shape = ".") + theme_bw() + scale_colour_gradient(low = "#FFFFFF",  high = "#F5B342", guide = "none") + scale_alpha(guide = "none")
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/twitter_location2.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/tweet_location.R', echo=TRUE)
MapDataPlot(TwitterData)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/tweet_location.R', echo=TRUE)
worldMap <- map_data("world")  # Easiest way to grab a world map shapefile
with(locations, plot(longitude, latitude))
with(locations, plot(longitude, latitude))
worldMap <- map_data("world")  # Easiest way to grab a world map shapefile
worldMap <- map_data("world")  # Easiest way to grab a world map shapefile
print(worldMap)
ggplot(worldMap)
install.packages("maps")
install.packages("mapdata")
install.packages("maps")
install.packages('mapdata')
map('worldHires')
library(mapdata)
map('worldHires')
with(locations, plot(longitude, latitude))
map('worldHires')+with(locations,plot(longitude,latitude))
source('~/.active-rstudio-document', echo=TRUE)
install.packages('ggmap')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/location_1.R', echo=TRUE)
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/location_2.R', echo=TRUE)
installed.packages(maptools)
installe.packages(maptools)
install.packages(maptools)
install.packages('maptools')
source('~/Desktop/BigData/Twitter/Big-Data---Twitter-Sentiment-Analysis/location_2.R', echo=TRUE)
reload()
reload
